<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Design Pattern on Bean&#39;s blog</title>
    <link>https://tubean.github.io/tags/design-pattern/</link>
    <description>Recent content in Design Pattern on Bean&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>vi</language>
    <lastBuildDate>Sun, 09 Dec 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://tubean.github.io/tags/design-pattern/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[Design Pattern] Singleton Design Pattern</title>
      <link>https://tubean.github.io/2018/12/singleton-pattern/</link>
      <pubDate>Sun, 09 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://tubean.github.io/2018/12/singleton-pattern/</guid>
      <description>1. Singleton là gì? Đã khi nào bạn viết một class mà chỉ muốn nó chỉ có duy nhất một instance? Trong lập trình, chúng ta sẽ đôi lần thấy rằng một số class chỉ nên có duy nhất một instance, vì nếu có nhiều hơn một, chúng ta sẽ gặp phải một vài vấn đề như hành vi chương trình không chính xác, lãng phí tài nguyên hay kết quả không nhất quán.</description>
    </item>
    
    <item>
      <title>[Design Pattern] Composite Design Pattern</title>
      <link>https://tubean.github.io/2018/12/composite-pattern/</link>
      <pubDate>Wed, 05 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://tubean.github.io/2018/12/composite-pattern/</guid>
      <description>Trong bài viết này, chúng ta sẽ đi tìm hiểu về một mẫu thiết kế khá thú vị, đó là Composite pattern. Trong tiếng anh thì từ composite có nghĩa là làm một hỗn hợp, tức là một thứ gì đó được tạo từ rất nhiều thành phần hỗn tạp. Đây là một mẫu thiết kế thuộc nhóm cấu trúc. Một đối tượng composite được tạo thành từ một hay nhiều đối tượng tương tự nhau (hoặc có một số chức năng tương tự nhau).</description>
    </item>
    
    <item>
      <title>[Design Patterns] Facade Design Pattern in Java</title>
      <link>https://tubean.github.io/2018/11/facade-design-patterns/</link>
      <pubDate>Thu, 29 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://tubean.github.io/2018/11/facade-design-patterns/</guid>
      <description>Trong bài viết này, chúng ta cùng xem xét mẫu thiết kế khác, đó là Facade pattern. Trước khi đi vào chi tiết mẫu thiết kế, chúng ta cùng xem xét câu chuyện sau:
Công ty phần mềm A vận hành một sản phẩm tên là Schedule Server. Đó là một ứng dụng làm rất nhiều việc như gửi mail, sms, đọc và viết file đến địa chỉ đích, gửi và nhận file giữa 2 server.</description>
    </item>
    
    <item>
      <title>[Design Patterns] Adapter Design Pattern in Java</title>
      <link>https://tubean.github.io/2018/11/adapter-design-patterns/</link>
      <pubDate>Sun, 25 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://tubean.github.io/2018/11/adapter-design-patterns/</guid>
      <description>Chuyện kể rằng bạn Bean là một developer và đang phát triển một website e-commerce. Trang web này cho phép người dùng mua và thanh toán online bằng cách dùng một cổng thanh toán của bên thứ 3. Mọi thứ đều nhẹ nhàng như cân đường hộp sữa, cho đến một ngày mưa gió bão bùng&amp;hellip; Vào cái ngày định mệnh ấy, PM của bạn Bean thông báo rằng sắp tới website sẽ thay đổi cổng thanh toán và bạn Bean sẽ phải chuẩn bị cho thay đổi này.</description>
    </item>
    
  </channel>
</rss>