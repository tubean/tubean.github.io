<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Microservice on Bean&#39;s blog</title>
    <link>https://tubean.github.io/tags/microservice/</link>
    <description>Recent content in Microservice on Bean&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>vi</language>
    <lastBuildDate>Thu, 20 Dec 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://tubean.github.io/tags/microservice/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[Microservice] Dựng Microservice web bằng Spring Boot và Eureka [Phần 3]</title>
      <link>https://tubean.github.io/2018/12/microservice-springboot-eureka-part3/</link>
      <pubDate>Thu, 20 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://tubean.github.io/2018/12/microservice-springboot-eureka-part3/</guid>
      <description>Ở bài viết trước, chúng ta đã dựng được một hệ thống microservice đơn giản với 2 microservice, 1 cổng gateway và 1 naming server và thực hiện xác thực người dùng bằng JWT. Trong bài viết lần này chúng ta sẽ tìm hiểu cách xử lý lỗi và ghi log trong hệ thống microservice theo thiết kế Circuit Breaker và Log Tracing.
1. Hystrix Giả sử bạn có 3 service: A, B và C.</description>
    </item>
    
    <item>
      <title>[Microservice] Dựng Microservice web bằng Spring Boot và Eureka [Phần 2]</title>
      <link>https://tubean.github.io/2018/12/microservice-springboot-eureka-part2/</link>
      <pubDate>Wed, 19 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://tubean.github.io/2018/12/microservice-springboot-eureka-part2/</guid>
      <description>Ở bài viết trước, chúng ta đã dựng được một hệ thống microservice đơn giản với 2 microservice, 1 cổng gateway và 1 naming server. Trong bài viết này, chúng ta sẽ tìm hiểu cách xác thực đối với hệ thống microservice bằng JWT.
1. Authentication Workflow Chúng ta sẽ xem xét những bước xác thực diễn ra như thế nào trong một hệ thống bình thường:
 Người dùng gửi một request để lấy một token thông qua một hệ thống đăng nhập.</description>
    </item>
    
    <item>
      <title>[Microservice] Dựng Microservice web bằng Spring Boot và Eureka [Phần 1]</title>
      <link>https://tubean.github.io/2018/12/microservice-springboot-eureka/</link>
      <pubDate>Tue, 18 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://tubean.github.io/2018/12/microservice-springboot-eureka/</guid>
      <description>Microservices là một giải pháp cho phép chia một hệ thống lớn thành một vài các component độc lập về phát triển, test và deploy.
Spring Cloud là một dự án con trong họ nhà Spring, được sử dụng để phát triển các ứng dụng phân tán. Một ứng dụng được gọi là phần tán (Distributed application) khi các phần của nó có thể được phát triển trên các ngôn ngữ khác nhau và được triển khai trên các máy chủ khác nhau.</description>
    </item>
    
    <item>
      <title>[Web architecture] Kiến trúc monolithic và microservice</title>
      <link>https://tubean.github.io/2018/12/monolithic-vs-microservice/</link>
      <pubDate>Sun, 16 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://tubean.github.io/2018/12/monolithic-vs-microservice/</guid>
      <description>Trong lập trình web hiện nay, hai loại kiến trúc web mà chúng ta thường áp dụng cho ứng dụng của mình là kiến trúc một khối (Monolithic architecture) và kiến trúc microservice (Microservice architecture). Trong bài viết này, chúng ta sẽ tìm hiểu về hai loại kiến trúc này để biết ưu nhược điểm cũng như khi nào sử dụng chúng.
1. Kiến trúc một khối (Monolithic web architecture) Kiến trúc một khối là mẫu thiết kế được dùng nhiều nhất trong giới lập trình web hiện nay bởi tính đơn giản của nó khi phát triển và khi deploy.</description>
    </item>
    
  </channel>
</rss>