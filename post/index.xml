<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Bean&#39;s blog</title>
    <link>https://tubean.github.io/post/</link>
    <description>Recent content in Posts on Bean&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>vi</language>
    <lastBuildDate>Sun, 25 Nov 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://tubean.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[Design Patterns] Adapter Design Pattern in Java</title>
      <link>https://tubean.github.io/2018/11/adapter-design-patterns/</link>
      <pubDate>Sun, 25 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://tubean.github.io/2018/11/adapter-design-patterns/</guid>
      <description>Chuyện kể rằng bạn Bean là một developer và đang phát triển một website e-commerce. Trang web này cho phép người dùng mua và thanh toán online bằng cách dùng một cổng thanh toán của bên thứ 3. Mọi thứ đều nhẹ nhàng như cân đường hộp sữa, cho đến một ngày mưa gió bão bùng&amp;hellip; Vào cái ngày định mệnh ấy, PM của bạn Bean thông báo rằng sắp tới website sẽ thay đổi cổng thanh toán và bạn Bean sẽ phải chuẩn bị cho thay đổi này.</description>
    </item>
    
    <item>
      <title>[Magical Java] Tại sao 1000 == 1000 là sai, nhưng 100 == 100 lại đúng?</title>
      <link>https://tubean.github.io/2018/11/magical-1000-vs-100/</link>
      <pubDate>Tue, 20 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://tubean.github.io/2018/11/magical-1000-vs-100/</guid>
      <description>Cùng xem đoạn code sau và dự đoán kết quá:
Integer a = 1000, b = 1000; System.out.println(a == b);//1 Integer c = 100, d = 100; System.out.println(c == d);//2  Nếu các bạn đưa ra đáp án là false, false thì xin chúc mừng, các bạn nắm lý thuyết rất tốt. Ở đây chúng ta đang so sánh 2 object với nhau, và khi dùng toán tử &amp;ldquo;==&amp;rdquo; thì kết quả sẽ trả về false nếu 2 tham chiếu không cùng trỏ đến cùng một đối tượng.</description>
    </item>
    
    <item>
      <title>[Spring Boot] Dựng app CRUD đơn giản bằng Spring Boot &#43; Thymeleaf trên Intelij</title>
      <link>https://tubean.github.io/2018/11/spring-boot-crud-app/</link>
      <pubDate>Sat, 17 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://tubean.github.io/2018/11/spring-boot-crud-app/</guid>
      <description>Để remind kiến thức cũng như tổng kết khi mới bắt đầu học một công nghệ mới, mình thường tạo một app đơn giản có đủ các thao tác thêm, xóa, sửa (CRUD). Bài viết này là một tutorial dạng cơ bản nhất khi học về Spring, sử dụng các công nghệ sau:
 Spring Boot: để khởi tạo và cấu hình ứng dụng một cách nhanh chóng. Spring MVC: để xây dựng app.</description>
    </item>
    
    <item>
      <title>[Java 8] Stream trong Java 8 (Phần 2)</title>
      <link>https://tubean.github.io/2018/11/java-stream-part2/</link>
      <pubDate>Mon, 12 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://tubean.github.io/2018/11/java-stream-part2/</guid>
      <description>Tiếp theo bài viết trước, bài viết này sẽ đi vào tìm hiểu cách sử dụng Stream trong Java.
1. Tạo một stream Có nhiều cách tạo một stream instance từ các source khác nhau. Mỗi khi được tạo thì instance sẽ không làm thay đổi source cũ, vì vậy chúng ta có thể thoải mái tạo nhiều instance stream khác nhau từ một source.
 Stream rỗng (Empty stream)  Khi muốn tạo một stream rỗng, ta dùng method empty():</description>
    </item>
    
    <item>
      <title>[Java 8] Stream trong Java 8 (Phần 1)</title>
      <link>https://tubean.github.io/2018/11/java-stream/</link>
      <pubDate>Thu, 08 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://tubean.github.io/2018/11/java-stream/</guid>
      <description>Lambda expression kể từ trở thành một phần của Java thì đã làm thay đổi đáng kể thói quen sử dụng các Collection như chúng ta đã từng dùng ở các phiên bản trước Java 8. Mặc dù có thể xây dựng lại một bộ API Collections thay thế, nhưng nó sẽ ảnh hưởng rất lớn đến toàn bộ hệ sinh thái Java. Vì vậy mà những nhà phát triển Java đã có một chiến lược tốt hơn, đó là thêm các phương thức mở rộng vào các interface có sẵn (như là Collection, List, Iterable,&amp;hellip;) cùng các lớp abstraction như Stream để thực hiện các phép toán tổng hợp trên tập dữ liệu, cung cấp thêm cho các lớp hiện có các phương thức để có thể làm việc với Stream mà không ảnh hưởng với các cách làm việc cũ.</description>
    </item>
    
    <item>
      <title>[Java 8] Lambda Expression trong Java 8</title>
      <link>https://tubean.github.io/2018/11/java-lambda-expression/</link>
      <pubDate>Wed, 07 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://tubean.github.io/2018/11/java-lambda-expression/</guid>
      <description>1. Lambda expresstion là gì? Lambda expression là một feature mới và nổi bật nhất của java 8 giúp số lượng code được giảm và là bước đầu khiến Java bước vào thế giới functional programming. Một lamba expression là một function được tạo mà không thuộc bất kì một class nào. Nó là một hàm không tên (unamed function) với các tham số (parameters) và phần body chứa khối lệnh được tách biệt với các tham số bằng dấu -&amp;gt;.</description>
    </item>
    
    <item>
      <title>[Spring Boot] Secu thập chưởng bảo vệ app Spring Boot của bạn</title>
      <link>https://tubean.github.io/2018/11/spring-boot-10-ways-security/</link>
      <pubDate>Tue, 06 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://tubean.github.io/2018/11/spring-boot-10-ways-security/</guid>
      <description>Spring Boot được release lần đầu năm 2014 và không có nhiều thay đổi đáng kể cho đến hiện tại. Với mục tiêu tự động cấu hình và giảm thiểu lượng code để có thể start một ứng dụng, Spring Boot đã giúp cho không biết con dân nhà Spring dễ sống và bớt chửi thề đi. Giống như khi dùng bất kì một framework nào để xây dựng ứng dụng, điều bạn cần quan tâm không chỉ là chất lượng code, vượt qua các test case, &amp;hellip; mà còn là khả năng bảo mật của ứng dụng.</description>
    </item>
    
    <item>
      <title>[Hugo] Hướng dẫn xây dựng blog cá nhân bằng Hugo &#43; Github</title>
      <link>https://tubean.github.io/2018/11/blog-with-hugo/</link>
      <pubDate>Sun, 04 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://tubean.github.io/2018/11/blog-with-hugo/</guid>
      <description>Bên cạnh các dịch vụ support người dùng tạo các trang blog cá nhân như blogger, wordpress,&amp;hellip; thì các dịch vụ hosting như github, bitbucket,&amp;hellip; cũng đã cho phép chúng ta xây dựng các trang blog trên chính tên miền của họ. Phổ biến hiện nay là các trang miền github.io được xây dựng trên nền tảng Jekyll. Tuy nhiên Jekyll không phải là duy nhất và cũng có những nhược điểm của riêng nó.</description>
    </item>
    
    <item>
      <title>Hello</title>
      <link>https://tubean.github.io/2018/10/hello/</link>
      <pubDate>Wed, 31 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://tubean.github.io/2018/10/hello/</guid>
      <description>&lt;p&gt;Để chào mừng bài post đầu tiên, một phút quốc ca bắt đầu!
&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>